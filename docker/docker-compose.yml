version: "3.9"

services:
  postgres:
    image: postgres:15-alpine
    container_name: tcg-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-tcg_collection}
      POSTGRES_USER: ${POSTGRES_USER:-tcguser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tcgpassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tcguser} -d ${POSTGRES_DB:-tcg_collection}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    networks:
      - tcg-net

  redis:
    image: redis:7-alpine
    container_name: tcg-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - tcg-net

  scryfall-bulk:
    build:
      context: ..
      dockerfile: services/scryfall-bulk/Dockerfile
    container_name: tcg-scryfall-bulk
    restart: unless-stopped
    environment:
      SCRYFALL_BULK_TYPE: ${SCRYFALL_BULK_TYPE:-oracle_cards}
      SCRYFALL_BULK_REFRESH_MS: ${SCRYFALL_BULK_REFRESH_MS:-43200000}
      SCRYFALL_BULK_MAX_RESULTS: ${SCRYFALL_BULK_MAX_RESULTS:-50}
      SCRYFALL_BULK_CACHE_IMAGES: ${SCRYFALL_BULK_CACHE_IMAGES:-true}
      SCRYFALL_BULK_IMAGE_DIR: ${SCRYFALL_BULK_IMAGE_DIR:-/data/images}
      SCRYFALL_BULK_IMAGE_FIELD: ${SCRYFALL_BULK_IMAGE_FIELD:-border_crop}
      SCRYFALL_BULK_IMAGE_FALLBACKS: ${SCRYFALL_BULK_IMAGE_FALLBACKS:-art_crop,large,normal,small}
      SCRYFALL_BULK_IMAGE_MAX_PER_REFRESH: ${SCRYFALL_BULK_IMAGE_MAX_PER_REFRESH:-250}
      SCRYFALL_BULK_IMAGE_CONCURRENCY: ${SCRYFALL_BULK_IMAGE_CONCURRENCY:-4}
      PORT: 4010
    volumes:
      - scryfall_bulk_data:/data
    ports:
      - "${SCRYFALL_BULK_PORT:-4010}:4010"
    profiles:
      - bulk
    networks:
      - tcg-net

  ygo-cache:
    build:
      context: ..
      dockerfile: services/ygo-cache/Dockerfile
    container_name: tcg-ygo-cache
    restart: unless-stopped
    environment:
      YGO_SOURCE_BASE_URL: ${YGO_SOURCE_BASE_URL:-https://db.ygoprodeck.com/api/v7}
      YGO_CACHE_REFRESH_MS: ${YGO_CACHE_REFRESH_MS:-43200000}
      YGO_CACHE_PAGE_SIZE: ${YGO_CACHE_PAGE_SIZE:-20}
      YGO_CACHE_MAX_PAGE_SIZE: ${YGO_CACHE_MAX_PAGE_SIZE:-200}
      PORT: 4020
    volumes:
      - ygo_cache_data:/data
    ports:
      - "${YGO_CACHE_PORT:-4020}:4020"
    profiles:
      - bulk
    networks:
      - tcg-net

  pokemon-cache:
    build:
      context: ..
      dockerfile: services/pokemon-cache/Dockerfile
    container_name: tcg-pokemon-cache
    restart: unless-stopped
    environment:
      POKEMON_SOURCE_BASE_URL: ${POKEMON_SOURCE_BASE_URL:-https://api.pokemontcg.io/v2}
      POKEMON_SOURCE_API_KEY: ${POKEMON_SOURCE_API_KEY:-}
      POKEMON_TCG_API_KEY: ${POKEMON_TCG_API_KEY:-}
      POKEMON_CACHE_REFRESH_MS: ${POKEMON_CACHE_REFRESH_MS:-43200000}
      POKEMON_CACHE_PAGE_SIZE: ${POKEMON_CACHE_PAGE_SIZE:-20}
      POKEMON_CACHE_MAX_PAGE_SIZE: ${POKEMON_CACHE_MAX_PAGE_SIZE:-200}
      POKEMON_CACHE_FETCH_PAGE_SIZE: ${POKEMON_CACHE_FETCH_PAGE_SIZE:-250}
      POKEMON_CACHE_FETCH_DELAY_MS: ${POKEMON_CACHE_FETCH_DELAY_MS:-200}
      PORT: 4030
    volumes:
      - pokemon_cache_data:/data
    ports:
      - "${POKEMON_CACHE_PORT:-4030}:4030"
    profiles:
      - bulk
    networks:
      - tcg-net

  tcgdex-cache:
    build:
      context: ..
      dockerfile: services/tcgdex-cache/Dockerfile
    container_name: tcg-tcgdex-cache
    restart: unless-stopped
    environment:
      TCGDEX_CACHE_REFRESH_MS: ${TCGDEX_CACHE_REFRESH_MS:-86400000}
      TCGDEX_CACHE_PAGE_SIZE: ${TCGDEX_CACHE_PAGE_SIZE:-20}
      PORT: 4040
    volumes:
      - tcgdex_cache_data:/data
    ports:
      - "${TCGDEX_CACHE_PORT:-4040}:4040"
    profiles:
      - bulk
    networks:
      - tcg-net

  backend:
    build:
      context: ..
      dockerfile: docker/backend.Dockerfile
      target: dev
    container_name: tcg-backend
    command: sh -c "npm install && npm run dev"
    environment:
      NODE_ENV: development
      PORT: ${BACKEND_PORT:-3000}
      DATABASE_URL: postgresql://${POSTGRES_USER:-tcguser}:${POSTGRES_PASSWORD:-tcgpassword}@postgres:5432/${POSTGRES_DB:-tcg_collection}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-changemeplease}
      POKEMON_TCG_API_KEY: ${POKEMON_TCG_API_KEY:-}
      SCRYFALL_API_BASE_URL: ${SCRYFALL_API_BASE_URL:-http://scryfall-bulk:4010}
      YGO_API_BASE_URL: ${YGO_API_BASE_URL:-http://ygo-cache:4020}
      POKEMON_API_BASE_URL: ${POKEMON_API_BASE_URL:-http://tcgdex-cache:4040}
      TCGDEX_API_BASE_URL: ${TCGDEX_API_BASE_URL:-http://tcgdex-cache:4040}
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    volumes:
      - ../backend:/app/backend
      - /app/backend/node_modules
      - ../tsconfig.base.json:/app/tsconfig.base.json:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - tcg-net

  frontend:
    build:
      context: ..
      dockerfile: docker/frontend.Dockerfile
      target: dev
    container_name: tcg-frontend
    command: sh -c "npm install && npm run dev -- --hostname 0.0.0.0 --port 3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:3000}
      BACKEND_API_ORIGIN: ${BACKEND_API_ORIGIN:-http://backend:3000}
    ports:
      - "${FRONTEND_PORT:-3001}:3000"
    volumes:
      - ../frontend:/app/frontend
      - /app/frontend/node_modules
      - ../tsconfig.base.json:/app/tsconfig.base.json:ro
    depends_on:
      backend:
        condition: service_started
    networks:
      - tcg-net

volumes:
  postgres_data:
  scryfall_bulk_data:
  ygo_cache_data:
  pokemon_cache_data:
  tcgdex_cache_data:

networks:
  tcg-net:
    driver: bridge
